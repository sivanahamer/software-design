"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[588],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>b});var r=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,r,o=function(e,a){if(null==e)return{};var t,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),i=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},d=function(e){var a=i(e.components);return r.createElement(l.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=i(t),m=o,b=u["".concat(l,".").concat(m)]||u[m]||p[m]||n;return t?r.createElement(b,s(s({ref:a},d),{},{components:t})):r.createElement(b,s({ref:a},d))}));function b(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var n=t.length,s=new Array(n);s[0]=m;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=e,c[u]="string"==typeof e?e:o,s[1]=c;for(var i=2;i<n;i++)s[i]=t[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2876:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>n,metadata:()=>c,toc:()=>i});var r=t(7462),o=(t(7294),t(3905));const n={},s="Factory Pattern",c={unversionedId:"patterns/creacionales/factory-method/README",id:"patterns/creacionales/factory-method/README",title:"Factory Pattern",description:"Descripci\xf3n b\xe1sica del patr\xf3n",source:"@site/docs/5.patterns/creacionales/factory-method/README.md",sourceDirName:"5.patterns/creacionales/factory-method",slug:"/patterns/creacionales/factory-method/",permalink:"/software-design/docs/patterns/creacionales/factory-method/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5.patterns/creacionales/factory-method/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Patr\xf3n Builder",permalink:"/software-design/docs/patterns/creacionales/builder/"},next:{title:"PROTOTYPE",permalink:"/software-design/docs/patterns/creacionales/prototype/"}},l={},i=[{value:"Descripci\xf3n b\xe1sica del patr\xf3n",id:"descripci\xf3n-b\xe1sica-del-patr\xf3n",level:2},{value:"Conocido tambi\xe9n como &quot;Virtual Creator&quot;",id:"conocido-tambi\xe9n-como-virtual-creator",level:2},{value:"Clase Interfaz y clase abstracta en el patr\xf3n Factory",id:"clase-interfaz-y-clase-abstracta-en-el-patr\xf3n-factory",level:2},{value:"\xbfCu\xe1ndo utilizar Factory Pattern?",id:"cu\xe1ndo-utilizar-factory-pattern",level:2},{value:"Aplicaciones del patr\xf3n",id:"aplicaciones-del-patr\xf3n",level:2},{value:"Estructura y actores",id:"estructura-y-actores",level:2},{value:"Ejemplo de Factory en Mediaci\xf3n Virtual",id:"ejemplo-de-factory-en-mediaci\xf3n-virtual",level:2},{value:"Implementaci\xf3n",id:"implementaci\xf3n",level:2},{value:"Dos variaciones",id:"dos-variaciones",level:3},{value:"Factory methods con par\xe1metros",id:"factory-methods-con-par\xe1metros",level:3},{value:"Variantes y problemas espec\xedficos al lenguaje",id:"variantes-y-problemas-espec\xedficos-al-lenguaje",level:3},{value:"El uso de templates para evitar subclases",id:"el-uso-de-templates-para-evitar-subclases",level:3},{value:"Convenciones de nombrado",id:"convenciones-de-nombrado",level:3},{value:"Ejemplo",id:"ejemplo",level:2},{value:"Creador y productos",id:"creador-y-productos",level:3},{value:"Creador concreto y productos concretos",id:"creador-concreto-y-productos-concretos",level:3},{value:"Consecuencias",id:"consecuencias",level:2},{value:"Malas",id:"malas",level:3},{value:"Buenas",id:"buenas",level:3},{value:"Relaci\xf3n con otros patrones",id:"relaci\xf3n-con-otros-patrones",level:2},{value:"Abstract factory",id:"abstract-factory",level:3},{value:"Template methods",id:"template-methods",level:3},{value:"Bibliograf\xeda",id:"bibliograf\xeda",level:3}],d={toc:i},u="wrapper";function p(e){let{components:a,...n}=e;return(0,o.kt)(u,(0,r.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"factory-pattern"},"Factory Pattern"),(0,o.kt)("h2",{id:"descripci\xf3n-b\xe1sica-del-patr\xf3n"},"Descripci\xf3n b\xe1sica del patr\xf3n"),(0,o.kt)("p",null,"El patr\xf3n Factory es un patr\xf3n de dise\xf1o creacional que se utiliza para crear objetos de manera que se abstrae el proceso de creaci\xf3n. En otras palabras, en lugar de crear objetos directamente en una clase cliente, se delega esta responsabilidad a una clase f\xe1brica. De esta forma, se logra un acoplamiento m\xe1s d\xe9bil entre las clases y se facilita la creaci\xf3n de objetos con diferentes comportamientos y caracter\xedsticas."),(0,o.kt)("h2",{id:"conocido-tambi\xe9n-como-virtual-creator"},'Conocido tambi\xe9n como "Virtual Creator"'),(0,o.kt)("p",null,'El patr\xf3n Factory tambi\xe9n es conocido como "Virtual Creator" debido a que la responsabilidad de crear objetos se delega a una clase separada, lo que permite que los objetos sean creados de forma virtual. En lugar de instanciar directamente una clase, se hace a trav\xe9s de una interfaz que permite crear diferentes objetos.'),(0,o.kt)("h2",{id:"clase-interfaz-y-clase-abstracta-en-el-patr\xf3n-factory"},"Clase Interfaz y clase abstracta en el patr\xf3n Factory"),(0,o.kt)("p",null,"En el patr\xf3n Factory, se utilizan una clase Interfaz y una clase abstracta para abstraer el proceso de creaci\xf3n de objetos. La clase Interfaz se encarga de definir los m\xe9todos que deben ser implementados por las clases concretas que se encargan de crear objetos. La clase abstracta, por su parte, se encarga de definir la estructura base de la clase f\xe1brica y de los objetos que esta clase crea."),(0,o.kt)("h2",{id:"cu\xe1ndo-utilizar-factory-pattern"},"\xbfCu\xe1ndo utilizar Factory Pattern?"),(0,o.kt)("p",null,"El patr\xf3n Factory es \xfatil cuando se necesita crear objetos que tengan diferentes comportamientos o caracter\xedsticas. Tambi\xe9n es \xfatil cuando se necesita abstraer el proceso de creaci\xf3n de objetos para evitar un acoplamiento fuerte entre las clases de un sistema. B\xe1sicamente se utiliza con objetos que cumplan la definici\xf3n de ",(0,o.kt)("strong",{parentName:"p"},"similar, pero no el mismo")),(0,o.kt)("h2",{id:"aplicaciones-del-patr\xf3n"},"Aplicaciones del patr\xf3n"),(0,o.kt)("p",null,"Seg\xfan Gamma, Erich et.al. \u201cDesign Patterns\u201d. Addison-Wesley, 1995, el patr\xf3n Factory tiene varias aplicaciones, entre ellas:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Cuando una clase no puede anticipar la clase de objetos que debe crear."),(0,o.kt)("li",{parentName:"ul"},"Cuando una clase delega la responsabilidad de la creaci\xf3n de objetos a una o varias clases auxiliares."),(0,o.kt)("li",{parentName:"ul"},"Cuando una clase desea que sus subclases especifiquen los objetos que deben ser creados.")),(0,o.kt)("h2",{id:"estructura-y-actores"},"Estructura y actores"),(0,o.kt)("p",null,"La estructura b\xe1sica del patr\xf3n Factory incluye los siguientes actores:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Product: representa la clase abstracta o interfaz que define los m\xe9todos que deben ser implementados por las clases concretas que se encargan de crear objetos."),(0,o.kt)("li",{parentName:"ul"},"ConcreteProduct: representa las clases concretas que implementan los m\xe9todos definidos por la clase Product."),(0,o.kt)("li",{parentName:"ul"},"Creator: representa la clase abstracta o interfaz que define los m\xe9todos para crear objetos. Esta clase se encarga de abstraer el proceso de creaci\xf3n de objetos."),(0,o.kt)("li",{parentName:"ul"},"ConcreteCreator: representa las clases concretas que implementan los m\xe9todos definidos por la clase Creator y que se encargan de crear objetos concretos.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Estrucutura en imagen de Factory Pattern",src:t(5534).Z,width:"643",height:"216"})),(0,o.kt)("h2",{id:"ejemplo-de-factory-en-mediaci\xf3n-virtual"},"Ejemplo de Factory en Mediaci\xf3n Virtual"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ejemplo de Factory en Mediaci\xf3n Virtual",src:t(4499).Z,width:"669",height:"403"})),(0,o.kt)("h2",{id:"implementaci\xf3n"},"Implementaci\xf3n"),(0,o.kt)("p",null,"A la hora de implementar una aplicaci\xf3n con un patr\xf3n de dise\xf1o factory method, se deben tomar en cuenta las siguientes consideraciones:"),(0,o.kt)("h3",{id:"dos-variaciones"},"Dos variaciones"),(0,o.kt)("p",null,"Hay dos principales variaciones a la hora de implementar el factory method:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Cuando la clase Creator es una clase abstracta, o sea, no tiene ninguna implementaci\xf3n por default del factory method."),(0,o.kt)("li",{parentName:"ol"},"Cuando la clase Creator s\xed es una clase concreta y provee un factory method por default.")),(0,o.kt)("h3",{id:"factory-methods-con-par\xe1metros"},"Factory methods con par\xe1metros"),(0,o.kt)("p",null,"Un factory method no necesita ser alterado con polimorfismo para especificar el tipo de producto concreto que quiere crear. Con la ayuda de los par\xe1metros, el factory method puede decidir cu\xe1l producto concreto crear. Normalmente se pasa como par\xe1metro un identificador que se relaciona con un producto concreto. Dentro del factory method existir\xe1 un switch (o serie de ifs) que evaluar\xe1n ese identificador y elegir\xe1n el producto concreto a crear."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'// en este caso esto va dentro del Trivia.cpp, que es el controlador \nQuestion* Trivia::createQuestion(const std::string& type) { \n    if (type == "textual") { \n        return new TextualQuestion();\n    } else if (type == "numeric") { \n        return new NumericQuestion();\n    } else { \n        return nullptr; // opci\xf3n por defecto\n    } \n}\n')),(0,o.kt)("h3",{id:"variantes-y-problemas-espec\xedficos-al-lenguaje"},"Variantes y problemas espec\xedficos al lenguaje"),(0,o.kt)("p",null,"Dependiendo del lenguaje de programaci\xf3n, este patr\xf3n de dise\xf1o puede tener diferentes variaciones que pretenden enfrentar las limitaciones del lenguaje. Por ejemplo, en programas Smalltalk se pueden crear m\xe9todos que retornan clases, por lo que el factory method del Creator puede usar este valor para crear el producto concreto que desee. Tambi\xe9n podr\xeda almacenar este valor en la clase Creator, para as\xed no tener que hacer una subclase Creator concreta y realizar la creaci\xf3n en la clase padre."),(0,o.kt)("h3",{id:"el-uso-de-templates-para-evitar-subclases"},"El uso de templates para evitar subclases"),(0,o.kt)("p",null,"Puede parecer que estamos forzados a hacer subclases solo para crear el producto concreto que se quiere. Pero por ejemplo, en c++, se puede utilizar templates para evitar esto."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"class Creator {\npublic: \n  virtual Product* CreateProduct() = 0 ;\n   }; \ntemplate <class TheProduct>\nclass StandardCreator: public Creator {\npublic:\n  virtual Product* CreateProduct();\n}; \ntemplate <class TheProduct> \nProduct* StandardCreator::CreateProduct () { \n  return new TheProduct;\n}\n")),(0,o.kt)("h3",{id:"convenciones-de-nombrado"},"Convenciones de nombrado"),(0,o.kt)("p",null,"Siempre se debe utilizar buenas convenciones de nombrado a la hora de nombrar los factory methods. Usualmente el nombre tendr\xe1 el nombre del producto a crear junto con un verbo. Por ejemplo, si se quiere crear un nuevo producto carro (Car en ingl\xe9s) el nombre del factory method puede ser createCar."),(0,o.kt)("h2",{id:"ejemplo"},"Ejemplo"),(0,o.kt)("p",null,"Supongamos que se quiere crear un juego llamado Maze Game. Este tiene varios elementos que lo componen (Maze, Room, Wall, Door). Ahora bien, tambi\xe9n existen varias versiones de este juego, y con esto, tambi\xe9n varias versiones de sus elementos."),(0,o.kt)("h3",{id:"creador-y-productos"},"Creador y productos"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ejemplo de Creador y productos",src:t(2392).Z,width:"589",height:"457"}),"\nSmith, J. Creator Products del patr\xf3n de Factory Method ","[Captura de pantalla]",". En: Gamma, E., Helm, R., Johnson, R., & Vlissides, J. (1995). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley."),(0,o.kt)("h3",{id:"creador-concreto-y-productos-concretos"},"Creador concreto y productos concretos"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ejemplo de Creador concreto y productos concretos",src:t(1743).Z,width:"526",height:"417"}),"\nSmith, J. Concrete Creator y Concrete Products del patr\xf3n de Factory Method ","[Captura de pantalla]",". En: Gamma, E., Helm, R., Johnson, R., & Vlissides, J. (1995). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley."),(0,o.kt)("h2",{id:"consecuencias"},"Consecuencias"),(0,o.kt)("h3",{id:"malas"},"Malas"),(0,o.kt)("p",null,"Como se mencion\xf3 anteriormente, una de las desventajas de utilizar el factory method es que el cliente tenga que crear una subclase del Creator solo para poder especificar el producto concreto que quiere. Esto no significa gran problema si ya se ten\xeda planeado el uso de clases hijas del Creator, pero si no era as\xed entonces es un paso de herencia extra que puede ser molesto a la hora de implementarse."),(0,o.kt)("h3",{id:"buenas"},"Buenas"),(0,o.kt)("p",null,"El uso de factory methods eliminan la necesidad de definir un m\xe9todo de creaci\xf3n para cada tipo de producto concreto que se piensa crear. Esto no solo permite que se escriba menos c\xf3digo, si no que permite que el c\xf3digo sea flexible."),(0,o.kt)("p",null,"Otra consecuencia buena es que los factory methods conectan jerarqu\xedas de clases paralelas. Las clases paralelas son clases cuya l\xf3gica y jerarqu\xeda es muy similar. Por ejemplo:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ejemplo de Creador concreto y productos concretos",src:t(7063).Z,width:"782",height:"296"}),"\nSmith, J. Jerarqu\xeda de clases del patr\xf3n de Factory Method ","[Captura de pantalla]",". En: Gamma, E., Helm, R., Johnson, R., & Vlissides, J. (1995). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley."),(0,o.kt)("p",null,"Como se puede observar, ambas jerarqu\xedas son l\xf3gicamente similares, en tanto que ambas se refieren a las figuras. Pero la jerarqu\xeda de la derecha es de manipuladores de esas figuras. Ahora bien, el factory method CreateManipulator define la conexi\xf3n entre las dos jerarqu\xedas de clases. Establece qu\xe9 clases pertenecen juntas."),(0,o.kt)("h2",{id:"relaci\xf3n-con-otros-patrones"},"Relaci\xf3n con otros patrones"),(0,o.kt)("h3",{id:"abstract-factory"},"Abstract factory"),(0,o.kt)("p",null,"Usualmente es implementado con factory methods."),(0,o.kt)("h3",{id:"template-methods"},"Template methods"),(0,o.kt)("p",null,"Como se mencion\xf3 anteriormente, es com\xfan encontrar factory methods dentro de un template."),(0,o.kt)("h3",{id:"bibliograf\xeda"},"Bibliograf\xeda"),(0,o.kt)("p",null,"Gamma, Erich et.al. \u201cDesign Patterns\u201d. Addison-Wesley, 1995. "),(0,o.kt)("p",null,"Refactoring.Guru. (2023). Factory Method. Refactoring.Guru. ",(0,o.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/factory-method"},"https://refactoring.guru/design-patterns/factory-method")))}p.isMDXComponent=!0},1743:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/concrete_creator_products-097684e4fb42684b0b8e09fef88d020b.png"},2392:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/creator_products-ac5aa3eb20bdbe9557a7ad5fb6b50612.png"},4499:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/ejemplo_MV-1bf9d71e1b68ccb9e81a6bb755a3da1e.png"},5534:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/estructura-76702e81d617beda907fb161662de5c7.png"},7063:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/jerarquia_de_clases_paralelas-8ed33dd8909c7822a7ab692be9891d10.png"}}]);