"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1762],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>g});var s=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,s,i=function(e,a){if(null==e)return{};var n,s,i={},t=Object.keys(e);for(s=0;s<t.length;s++)n=t[s],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(s=0;s<t.length;s++)n=t[s],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=s.createContext({}),l=function(e){var a=s.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},u=function(e){var a=l(e.components);return s.createElement(c.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},m=s.forwardRef((function(e,a){var n=e.components,i=e.mdxType,t=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||t;return n?s.createElement(g,r(r({ref:a},u),{},{components:n})):s.createElement(g,r({ref:a},u))}));function g(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var t=n.length,r=new Array(t);r[0]=m;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var l=2;l<t;l++)r[l]=n[l];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1723:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var s=n(7462),i=(n(7294),n(3905));const t={},r="Facade",o={unversionedId:"patterns/estructurales/Facade/Readme",id:"patterns/estructurales/Facade/Readme",title:"Facade",description:"Descripci\xf3n",source:"@site/docs/5.patterns/estructurales/Facade/Readme.md",sourceDirName:"5.patterns/estructurales/Facade",slug:"/patterns/estructurales/Facade/",permalink:"/software-design/docs/patterns/estructurales/Facade/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5.patterns/estructurales/Facade/Readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Patr\xf3n Composite",permalink:"/software-design/docs/patterns/estructurales/Composite/"},next:{title:"Patr\xf3n Flyweight",permalink:"/software-design/docs/patterns/estructurales/Flyweight/"}},c={},l=[{value:"Descripci\xf3n",id:"descripci\xf3n",level:2},{value:"Beneficios",id:"beneficios",level:2},{value:"Diferencia entre Facade y API",id:"diferencia-entre-facade-y-api",level:3},{value:"Perjuicios de Facade",id:"perjuicios-de-facade",level:2},{value:"Soluci\xf3n",id:"soluci\xf3n",level:2},{value:"Cuando utilizar Facade",id:"cuando-utilizar-facade",level:2},{value:"Cuando no utilizar Facade",id:"cuando-no-utilizar-facade",level:2},{value:"Ejemplo en c\xf3digo",id:"ejemplo-en-c\xf3digo",level:2}],u={toc:l},d="wrapper";function p(e){let{components:a,...n}=e;return(0,i.kt)(d,(0,s.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"facade"},"Facade"),(0,i.kt)("img",{src:"./img/Facade.png",alt:"Facade"}),(0,i.kt)("h2",{id:"descripci\xf3n"},"Descripci\xf3n"),(0,i.kt)("p",null,'Facade es un patron de software que simplifica el acceso a un sub sistema en un programa, donde el codigo cliente de este sub sistema en vez de usar los distintos componentes del sistema directamente, utiliza una "Fachada" la cual representa todo el sub sistema, lo que es capaz de convertir multiples lineas de inicializacion, orquestracion y manejo de dependencias, en un simple llamado a una funcion'),(0,i.kt)("h1",{id:"qu\xe9-soluciona"},"Qu\xe9 soluciona"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Subsistemas complejos"),(0,i.kt)("li",{parentName:"ul"},"Programas monol\xedticos"),(0,i.kt)("li",{parentName:"ul"},"Mal escalado de c\xf3digo.")),(0,i.kt)("h2",{id:"beneficios"},"Beneficios"),(0,i.kt)("p",null,"Facade en el desarrollo de software es algo muy importante para hacer codigo "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Entendible"),(0,i.kt)("li",{parentName:"ul"},"Cohesivo"),(0,i.kt)("li",{parentName:"ul"},"Desacoplado"),(0,i.kt)("li",{parentName:"ul"},"Escalable\nLas razones por las que estos beneficios se cumplen son por:"),(0,i.kt)("li",{parentName:"ul"},"Dar una estructura sencilla"),(0,i.kt)("li",{parentName:"ul"},"Permitir concentrar las funcionalidades de un mayor nivel en la Fachada "),(0,i.kt)("li",{parentName:"ul"},"Ser el unico componente que interactua con el codigo cliente"),(0,i.kt)("li",{parentName:"ul"},"Mantener los cambios en el sub sistema y no cada vez que un codigo cliente utilizo algunos componentes del sub sistema")),(0,i.kt)("h3",{id:"diferencia-entre-facade-y-api"},"Diferencia entre Facade y API"),(0,i.kt)("p",null,"Si bien las API y el patron Facade se parecen, no significa que sean lo mismo, siendo concretos, Facade solo se encarga de agrupar un subsistema en una clase y hacerse cargo de todas sus funciones, mientras que una API (Application ",(0,i.kt)("strong",{parentName:"p"},"Programming")," Interface), se encarga de mucho mas, porque necesita definir la interaccion con un programa externo, esto se traduce a definir protocolos de interaccion, reglas y las funciones con las que dispone el otro programa\nUna API puede contener un Facade pero no viceversa"),(0,i.kt)("h2",{id:"perjuicios-de-facade"},"Perjuicios de Facade"),(0,i.kt)("p",null,"Estos son posibles perjuicios que Facade puede ocasionar en el codigo dependiendo de la implementacion, causando mas problemas que soluciones, estos son:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Funcionalidad limitada")),(0,i.kt)("p",null,"Ya que Facade ahora se encarga de interactuar con el codigo cliente unicamente, la variedad de funciones que el sub sistema ofrecia es reducida sustancialmente, como en sub sistemas que no siguen una secuencia normal de funcionamiento"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Acoplamiento")),(0,i.kt)("p",null,"Ya que el Facade es el unico que interactua con codigo cliente, este codigo tiene que acoplarse a lo que el Facade del sub sistema ofrezca y adaptarse a su modo de uso, donde si este modo de uso se cambia frecuentemente, se genera dificultad en el codigo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Apertura de malas practicas")),(0,i.kt)("p",null,'La simpleza por la que Facade se rige puede dar a pie una "creatividad peligrosa" por parte del desarrollador, donde ahora este Facade empieza a hacer funcionalidades extras que no le competen para cumplir su rol, o tambien implementar nuevas funciones directamente en el Facade en vez de un componente, bajando la cohesion del codigo'),(0,i.kt)("h2",{id:"soluci\xf3n"},"Soluci\xf3n"),(0,i.kt)("p",null,"Para implementar Facade en un sistema, lo primero es ",(0,i.kt)("strong",{parentName:"p"},"identificar")," los servicios de un sub sistema el cual un c\xf3digo cliente usa, y que estos servicios sean ",(0,i.kt)("strong",{parentName:"p"},"altamente cohesivos")," "),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Por ejemplo, para un ",(0,i.kt)("strong",{parentName:"p"},"sistema de universidad"),", se pueden tener servicios para un ",(0,i.kt)("strong",{parentName:"p"},"estudiante"),"(c\xf3digo cliente), como ",(0,i.kt)("strong",{parentName:"p"},"visualizar cursos"),", ",(0,i.kt)("strong",{parentName:"p"},"subir asignaciones")," y ",(0,i.kt)("strong",{parentName:"p"},"ver calificaciones")),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"Servicio de cursos\n\nServicio de asignaciones\n\nServicio de calificaciones\n")),(0,i.kt)("p",{parentName:"blockquote"},"Supongamos que cada servicio es una clase")),(0,i.kt)("p",null,"Ahora, teniendo reunidos estos servicios con un buen grado de cohesi\xf3n, se ",(0,i.kt)("strong",{parentName:"p"},"crea una clase Facade")," la cual va a contener todos estos servicios, y ",(0,i.kt)("strong",{parentName:"p"},"\xe9l ser\xe1 el \xfanico que se encargar\xe1 de usar las funciones de cada servicio")),(0,i.kt)("p",null,"En cuanto a las funciones que el Facade tendr\xe1, estas ser\xe1n b\xe1sicamente usar las funciones de los servicios para ofrecer el mismo servicio que daba este sub sistema, de forma simplificada pero limitada, lo que puede ser algo bueno o malo, dependiendo de qu\xe9 tan r\xedgido el sub sistema sea de usar"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"FacadeUniversidad va a contener:"),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"Servicio de cursos\n\nServicio de asignaciones\n\nServicio de calificaciones\n")),(0,i.kt)("p",{parentName:"blockquote"},"Y cada servicio se organizan y usan para proporcionar la funcionalidad completa del sub sistema")),(0,i.kt)("p",null,"Y con esto logramos obtener una clase que representa un sub sistema altamente cohesivo, y f\xe1cil de usar para cualquier c\xf3digo cliente(estudiante)"),(0,i.kt)("h2",{id:"cuando-utilizar-facade"},"Cuando utilizar Facade"),(0,i.kt)("p",null,"El patr\xf3n Facade se debe utilizar cuando se desea simplificar la interacci\xf3n con un sub-sistema complejo y proporcionar una interfaz unificada y f\xe1cil de usar para los clientes.\nCasos: Cuando se tiene un sub-sistema complejo, cuando se busca una interfaz m\xe1s intuitiva y f\xe1cil de usar, cuando se desea simplificar el mantenimiento."),(0,i.kt)("h2",{id:"cuando-no-utilizar-facade"},"Cuando no utilizar Facade"),(0,i.kt)("p",null,"Cuando se necesita un alto grado de flexibilidad, cuando el sub-sistema cambia con frecuencia, cuando se necesita acceso a funcionalidades avanzadas del subsistema."),(0,i.kt)("h2",{id:"ejemplo-en-c\xf3digo"},"Ejemplo en c\xf3digo"),(0,i.kt)("p",null,"Para la implementaci\xf3n, podemos seguir lo dicho en la Soluci\xf3n, el ejemplo de la Universidad, donde se tienen 3 servicios que hacen algo en espec\xedfico y son parte de un sub sistema "),(0,i.kt)("p",null,"El leguaje que se uso para implementar el patr\xf3n fue C++"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-C++"},'class CourseService {\n    public:\n    string availableCourses;\n    \n    CourseService() {\n        availableCourses = "\n            Math\n            Science\n            Language\n            Literature\n            Sports";\n    }\n\n    string getAvailableCourses() {\n        return availableCourses;\n    }\n\n    string enrollInCourse(string student, string courseId) {\n        // Enroll student if course exists and is valid\n        if (strutil::contains(this->availableCourses, courseId)) {\n            stringstream result;\n            result << "Student enrolled into " << courseId << " course correctly";\n            return result.str();\n        }\n        // If not, return notice that student couldn\'t be enrolled\n        return "Student not enrolled";\n    }\n};\n')),(0,i.kt)("p",null,"El c\xf3digo de los siguientes servicios se simplifica porque sigue la misma l\xf3gica que el servicio anterior"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-C++"},'class AssignmentService {    \n    AssignmentService() {\n        // CourseService initialization\n    }\n\n    string submitAssignment(string student, string courseId, string submission, CourseService& courseService) {\n        // Submit assignment if course exists and is valid\n        if (courseId in courseService.availableCourses) {\n            stringstream result;\n            result << "\\t Assignment " << submission << " submitted correctly";\n            return result.str();\n        }\n        // If not, return notice that student couldn\'t submit assignment\n        return "Assignment not submitted";\n    }\n};\n\nclass GradeService {\n    GradeService() {\n    }\n\n    string getGradesForCourse(string  student, string courseId, CourseService& courseService) {\n        // Student passed if course exists and is valid\n        if (courseId in courseService.availableCourses)) {\n            return "Student passed :)";\n        }\n        // If not, student didn\'t pass\n        return "Student did not pass ;(";\n    }\n};\n\n')),(0,i.kt)("p",null,'Y as\xed tenemos definidos nuestros servicios, como clases, y estas clases pueden necesitar otros servicios para funcionar, como el "courseService" que es necesitado por los otros 2 servicios, y adem\xe1s estos servicios cumplen funciones bien definidas y no hacen cosas que no les competen, cumpliendo cohesividad\nY lo \xfaltimo que queda es unir estas clases en una sola la cual ',(0,i.kt)("strong",{parentName:"p"},"controlar\xe1 todos estos servicios el s\xf3lo y brinda el servicio del sub sistema total")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-C++"},"class CourseSystemFacade {\n\n    CourseService* courseService;\n    AssignmentService* assignmentService;\n    GradeService* gradeService;\n\n    public:\n\n    string user;\n\n    CourseSystemFacade(string user) {\n        this->user = user;\n        this->courseService = new CourseService();\n        this->gradeService = new GradeService();\n        this->assignmentService = new AssignmentService();\n        // ... other services\n    }\n\n    string getAvailableCourses() {\n        return this->courseService->getAvailableCourses();\n    }\n\n    string enrollInCourse(string courseId) {\n        return this->courseService->enrollInCourse(this->user, courseId);\n    }\n\n    string getGradesForCourse(string courseId) {\n        return this->gradeService->getGradesForCourse(this->user, courseId, *this->courseService);\n    }\n\n    string submitAssignment(string assignmentId, string submission) {\n        return this->assignmentService->submitAssignment(this->user, assignmentId, submission, *this->courseService);\n    }\n\n    // ... other simplified methods for interacting with the system\n};\n")),(0,i.kt)("p",null,"Esta clase Facade funciona teniendo un estudiante, el cual simula ser el c\xf3digo cliente tambi\xe9n que usa el sub sistema, es entonces donde cualquier funci\xf3n de los 3 servicios ya no se hace llamando a los servicios directamente, sino que se llama al Facade y la funci\xf3n que cumpla la misma funcionalidad que la que se ten\xeda antes, y muchas m\xe1s funciones, gracias a lo f\xe1cil que es ahora a\xf1adir funciones sin temor al ",(0,i.kt)("strong",{parentName:"p"},"acoplamiento entre el c\xf3digo cliente y el sub sistema")),(0,i.kt)("h1",{id:"consecuencias"},"Consecuencias"),(0,i.kt)("p",null,"El uso del patr\xf3n tiene varias consecuencias positivas. En primer lugar, logra simplificar un sub-sistema, lo que facilita su comprensi\xf3n y mantenimiento. Adem\xe1s, permite desacoplar el c\xf3digo, lo que significa que los componentes del sistema pueden funcionar de manera independiente, lo que facilita las modificaciones y mejoras. Otro beneficio es que el c\xf3digo se puede escalar, lo que significa que puede adaptarse a sistemas m\xe1s grandes sin dificultad. Por \xfaltimo, el patr\xf3n permite la implementaci\xf3n de capas en un sistema, lo que proporciona una estructura organizada y modular."),(0,i.kt)("p",null,"Sin embargo, tambi\xe9n existen algunas consecuencias negativas asociadas con su uso. En primer lugar, hay una limitaci\xf3n en las funciones que se pueden realizar utilizando este patr\xf3n. Esto significa que puede haber restricciones en la implementaci\xf3n de ciertas funcionalidades m\xe1s complejas. Adem\xe1s, si se utiliza incorrectamente, puede generar un alto acoplamiento dentro del sistema, lo que dificulta la modificaci\xf3n y el mantenimiento. Existe tambi\xe9n la posibilidad de que se abran brechas para malas pr\xe1cticas de programaci\xf3n. Por \xfaltimo, el uso excesivo del patr\xf3n puede resultar en una excesiva indirecci\xf3n de funciones, lo que puede afectar la eficiencia y el rendimiento del sistema."),(0,i.kt)("h1",{id:"implementaci\xf3n"},"Implementaci\xf3n"),(0,i.kt)("p",null,"Existen algunas sugerencias a tener en cuenta. En primer lugar, es importante proporcionar cohesi\xf3n en el sistema para mejorar la implementaci\xf3n de un Facade. Esto implica asegurarse de que los componentes est\xe9n interconectados de manera efectiva y que el Facade pueda actuar como una interfaz unificada para acceder a ellos."),(0,i.kt)("p",null,"Adem\xe1s, es fundamental mantener la simplicidad en el dise\xf1o del Facade. Evitar sobrecargarlo con m\xe9todos adicionales que podr\xedan generar un mayor acoplamiento entre los componentes. En lugar de ello, es recomendable que el Facade se centre en las funcionalidades principales y esenciales, evitando la inclusi\xf3n de m\xe9todos que puedan generar dependencias innecesarias."),(0,i.kt)("p",null,"Es importante tener en cuenta que el rendimiento del sistema puede verse afectado cuando se requiere el uso de varias clases intermedias para realizar determinadas acciones a trav\xe9s del Facade. Esto puede generar una mayor complejidad y consumo de recursos. Especialmente cuando se trata de la implementaci\xf3n de capas de Facades, es necesario evaluar cuidadosamente la necesidad y el impacto que esto pueda tener en el rendimiento general del sistema."),(0,i.kt)("h1",{id:"relaci\xf3n-con-los-principios-solid"},"Relaci\xf3n con los principios SOLID"),(0,i.kt)("p",null,"El patr\xf3n Facade se relaciona con el principio de responsabilidad \xfanica, ya que permite que cada sub-sistema complejo tenga una \xfanica responsabilidad y se encargue de realizar sus tareas espec\xedficas. Adem\xe1s, se relaciona con el principio de abierto/cerrado, ya que permite que el c\xf3digo cliente no se vea afectado por los cambios en el sub-sistema, ya que el Facade se encarga de realizar las modificaciones necesarias. Por \xfaltimo, se relaciona con el principio de sustituci\xf3n de Liskov, ya que el Facade permite que el c\xf3digo cliente pueda utilizar los sub-sistemas de forma transparente, sin importar el sub-sistema que se est\xe9 utilizando."),(0,i.kt)("h1",{id:"patrones-relacionados"},"Patrones relacionados"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Composite"),(0,i.kt)("li",{parentName:"ul"},"Decorator"),(0,i.kt)("li",{parentName:"ul"},"Proxy")))}p.isMDXComponent=!0}}]);