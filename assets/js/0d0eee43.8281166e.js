"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[489],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>b});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),d=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},c=function(e){var a=d(e.components);return n.createElement(l.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,b=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return t?n.createElement(b,s(s({ref:a},c),{},{components:t})):n.createElement(b,s({ref:a},c))}));function b(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7693:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=t(7462),r=(t(7294),t(3905));const o={},s="**Investigaci\xf3n del patr\xf3n de dise\xf1o Observer**",i={unversionedId:"patterns/comportamiento/ObserverPattern/README",id:"patterns/comportamiento/ObserverPattern/README",title:"**Investigaci\xf3n del patr\xf3n de dise\xf1o Observer**",description:"Estudiantes:",source:"@site/docs/5.patterns/comportamiento/ObserverPattern/README.md",sourceDirName:"5.patterns/comportamiento/ObserverPattern",slug:"/patterns/comportamiento/ObserverPattern/",permalink:"/software-design/docs/patterns/comportamiento/ObserverPattern/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5.patterns/comportamiento/ObserverPattern/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Patr\xf3n Memento o Patr\xf3n Token",permalink:"/software-design/docs/patterns/comportamiento/Memento/"},next:{title:"Patr\xf3n Visitor",permalink:"/software-design/docs/patterns/comportamiento/Visitor/"}},l={},d=[{value:"<strong>Estudiantes:</strong>",id:"estudiantes",level:2},{value:"<strong>Concepto</strong>",id:"concepto",level:2},{value:"<strong>Nombres:</strong>",id:"nombres",level:2},{value:"<strong>Problema:</strong>",id:"problema",level:2},{value:"<strong>Ejemplos:</strong>",id:"ejemplos",level:2},{value:"<strong>Ejemplo de mediaci\xf3n:</strong>",id:"ejemplo-de-mediaci\xf3n",level:3},{value:"<strong>Ejemplo de Youtube</strong>",id:"ejemplo-de-youtube",level:3},{value:"<strong>Ejemplo de Netflix</strong>",id:"ejemplo-de-netflix",level:3},{value:"<strong>Soluci\xf3n:</strong>",id:"soluci\xf3n",level:2},{value:"<strong>Sujeto:</strong>",id:"sujeto",level:3},{value:"<strong>Observador:</strong>",id:"observador",level:3},{value:"<strong>Observador Concreto:</strong>",id:"observador-concreto",level:3},{value:"<strong>Relaci\xf3n con otros patrones:</strong>",id:"relaci\xf3n-con-otros-patrones",level:2},{value:"<strong>Consecuencias:</strong>",id:"consecuencias",level:2},{value:"<strong>Objetivos o ventajas:</strong>",id:"objetivos-o-ventajas",level:3},{value:"<strong>Trade-off:</strong>",id:"trade-off",level:3},{value:"<strong>Implementaci\xf3n:</strong>",id:"implementaci\xf3n",level:2},{value:"<strong>Evitar y trampas:</strong>",id:"evitar-y-trampas",level:3},{value:"<strong>Sugerencias y t\xe9cnicas:</strong>",id:"sugerencias-y-t\xe9cnicas",level:3},{value:"<strong>Ejemplo en c\xf3digo</strong>",id:"ejemplo-en-c\xf3digo",level:2},{value:"Presentaci\xf3n",id:"presentaci\xf3n",level:2},{value:"<strong>Bibliograf\xeda</strong>",id:"bibliograf\xeda",level:2}],c={toc:d},p="wrapper";function u(e){let{components:a,...o}=e;return(0,r.kt)(p,(0,n.Z)({},c,o,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"investigaci\xf3n-del-patr\xf3n-de-dise\xf1o-observer"},(0,r.kt)("strong",{parentName:"h1"},"Investigaci\xf3n del patr\xf3n de dise\xf1o Observer")),(0,r.kt)("h2",{id:"estudiantes"},(0,r.kt)("strong",{parentName:"h2"},"Estudiantes:")),(0,r.kt)("p",null,"Fabio Andr\xe9s Sanabria Valer\xedn C07194"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Correo:")," ",(0,r.kt)("a",{parentName:"p",href:"mailto:fasav12@gmail.com"},"fasav12@gmail.com")),(0,r.kt)("p",null,"Esteban Iglesias Vargas C03913"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Correo:")," ",(0,r.kt)("a",{parentName:"p",href:"mailto:Esteban.iglesias@ucr.ac.cr"},"Esteban.iglesias@ucr.ac.cr")),(0,r.kt)("h2",{id:"concepto"},(0,r.kt)("strong",{parentName:"h2"},"Concepto")),(0,r.kt)("p",null,"El patr\xf3n Observer es un patr\xf3n de dise\xf1o de comportamiento que define una relaci\xf3n de uno a muchos entre objetos, de manera que cuando un objeto cambia de estado, este notifica y actualiza autom\xe1ticamente a todos los objetos que dependen de \xe9l. ","[1]"),(0,r.kt)("p",null,"Para entender mejor este patr\xf3n puede observar el siguiente diagrama creado por el ingeniero en software y creador de contenido Martin de Betta Tech en donde parece que se bas\xf3 en el diagrama de GOF de Observer."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Imagen Explicativa de Observer",src:t(7791).Z,width:"1390",height:"702"})),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Diagrama 1. Diagrama explicativo del patr\xf3n Observer creado por BettaTech basado en el diagrama de GOF ","[2]")))),(0,r.kt)("h2",{id:"nombres"},(0,r.kt)("strong",{parentName:"h2"},"Nombres:")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Observer, patr\xf3n Dependiente patr\xf3n Publicador/Suscriptor o patr\xf3n Evento/Manejador")),", se le dice as\xed porque refleja la relaci\xf3n entre el sujeto (publicador) que env\xeda notificaciones y los observadores (suscriptores) que reciben y responden a esas notificaciones. ","[1]"),(0,r.kt)("h2",{id:"problema"},(0,r.kt)("strong",{parentName:"h2"},"Problema:")),(0,r.kt)("p",null,"Existen diversos escenarios y contextos en donde se puede utilizar este patr\xf3n para conseguir eficiencia, eficacia y mejor\xeda en el dise\xf1o de un sistema, es por eso que es indispensable conocer este patr\xf3n y usarlo cuando:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Cuando los cambios en el estado de un objeto deben propagarse a otros objetos sin acoplarlos expl\xedcitamente. Si un objeto necesita notificar a m\xfaltiples objetos sobre un cambio en su estado, el patr\xf3n Observer proporciona una soluci\xf3n eficiente y desacoplada. Esto evita acoplar directamente los objetos y permite una comunicaci\xf3n flexible y din\xe1mica","[1]",".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Cuando un cambio en un objeto requiere cambiar otros, y no sabemos cu\xe1ntos y qu\xe9 tipo de objetos necesitan cambiarse ","[1]")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Cuando se necesita establecer una relaci\xf3n entre componentes en capas o m\xf3dulos separados. Esto facilita la comunicaci\xf3n entre componentes o m\xf3dulos que est\xe1n separados en el espacio y el tiempo. Los observadores pueden estar ubicados en diferentes partes del sistema y seguir recibiendo notificaciones cuando ocurran cambios en el sujeto. ","[1]"))),(0,r.kt)("h2",{id:"ejemplos"},(0,r.kt)("strong",{parentName:"h2"},"Ejemplos:")),(0,r.kt)("h3",{id:"ejemplo-de-mediaci\xf3n"},(0,r.kt)("strong",{parentName:"h3"},"Ejemplo de mediaci\xf3n:")),(0,r.kt)("p",null,"Este ejemplo ser\xe1 el implementado en c\xf3digo, se desea implementar una funcionalidad en Mediaci\xf3n Virtual donde cada vez que un profesor de un curso en el que el estudiante est\xe9 inscrito a\xf1ada una tarea, el sistema le notifique al estudiante que este a subido una nueva asignaci\xf3n. Adem\xe1s, si el estudiante retira el curso o es expulsado de este, \xe9l no puede recibir las notificaciones del curso. Para que el ejemplo anterior se pueda entender de una mejor manera, se cre\xf3 un dibujo basado en el diagrama hecho por GOF en el libro Design Patterns sobre Observer:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Imagen del correo",src:t(8837).Z,width:"958",height:"682"})),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Diagrama 2. Diagrama macro del ejemplo anterior basado en diagrama de GOF y BettaTech")))),(0,r.kt)("p",null,"El anterior ejemplo se desea implementar para que se parezca a una funcionalidad ya implementada en mediaci\xf3n virtual, la cu\xe1l es la notificaci\xf3n de todos los estudiantes cuando un profesor realiza retroalimentaci\xf3n de una tarea. Aunque los programadores de mediaci\xf3n virtual lo m\xe1s probable es que no hayan utilizado este patr\xf3n de dise\xf1o para implementar esa funcionalidad, lo cierto es que nos sirve de ejemplo para saber como funciona el patr\xf3n Observer de forma general. A continuacion se mostrar\xe1 una imagen de la notificaci\xf3n de la revisi\xf3n de una tarea en mediaci\xf3n virtual."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Imagen del correo",src:t(118).Z,width:"1477",height:"382"})),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Imagen 1. Imagen de cuando un profesor revisa una tarea y este notifica al los estudiantes del curso")))),(0,r.kt)("h3",{id:"ejemplo-de-youtube"},(0,r.kt)("strong",{parentName:"h3"},"Ejemplo de Youtube")),(0,r.kt)("p",null,"Otro ejemplo en donde se utiliza el patr\xf3n Observer es en Youtube, cuando una persona se suscribe a un canal de youtube, esta selecciona una opci\xf3n para recibir notificaciones cuando el canal sube un video, en este caso el canal es el observado o sujeto y los suscriptores del canal son los observadores. Entonces, cada vez que el canal de youtube actualiza su estructura (o sea que se sube un nuevo video), este notifica a todos los suscriptores sobre el cambio de su estructura a trav\xe9s de un notify()."),(0,r.kt)("h3",{id:"ejemplo-de-netflix"},(0,r.kt)("strong",{parentName:"h3"},"Ejemplo de Netflix")),(0,r.kt)("p",null,"El ejemplo de netflix es similar al de Youtube, cada vez que un usuario compra una suscripci\xf3n de netflix, a este siempre le llegan notificaci\xf3n de las pel\xedculas que acaban de meter o las pel\xedculas que estan a punto de sacar de la aplicaci\xf3n. Esto es un claro ejemplo del patr\xf3n Observer ya que existen varios observadores ",(0,r.kt)("strong",{parentName:"p"},"(Usuarios que pagar\xf3n la membres\xeda)")," y hay un sujeto u observable ",(0,r.kt)("strong",{parentName:"p"},"(Cuenta de netflix donde estan todas las pel\xedculas)"),". Cada vez que haya un peque\xf1o cambio en el cat\xe1logo de netflix, este notifica de forma ",(0,r.kt)("strong",{parentName:"p"},"aleatoria")," a todos los usuarios."),(0,r.kt)("p",null,"A continuaci\xf3n se motrar\xe1 una imagen que explica de forma visual y simple como funciona el patr\xf3n observer en los anteriores ejemplos:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Imagen del correo",src:t(7546).Z,width:"1365",height:"878"})),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Imagen 2. Imagen de cuando netflix y youtube notifica a todos los usuarios utilizando el patr\xf3n observer ","[4]")))),(0,r.kt)("h2",{id:"soluci\xf3n"},(0,r.kt)("strong",{parentName:"h2"},"Soluci\xf3n:")),(0,r.kt)("h3",{id:"sujeto"},(0,r.kt)("strong",{parentName:"h3"},"Sujeto:")),(0,r.kt)("p",null,"Es el objeto o sujeto que ser\xe1 observado por los observadores, mantiene una lista (agregar o attach y eliminar o detach) de las personas u observadores para notificar del cambio de estado, de igual manera, puede mantener un estado que puede ser consultado por los observadores."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Se relaciona:")," Manteniendo una lista de los observadores para saber a quienes notificar."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Responsabilidad:")," Notificar a los miembros de la lista"),(0,r.kt)("h3",{id:"observador"},(0,r.kt)("strong",{parentName:"h3"},"Observador:")),(0,r.kt)("p",null,"Puede ser una interfaz o clase que define a los observadores, contiene un m\xe9todo llamado com\xfanmente update que notifica sobre el cambio de estado, puede incluir informaci\xf3n adicional sobre el mismo."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Se relaciona:")," Ser\xe1 miembro de la lista del sujeto que tiene inter\xe9s en ser notificado."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Responsabilidad:")," Recibir el update para tomar m\xe1s adelante decisiones sobre el cambio."),(0,r.kt)("h3",{id:"observador-concreto"},(0,r.kt)("strong",{parentName:"h3"},"Observador Concreto:")),(0,r.kt)("p",null,"Implementa la interfaz del observador y puede mantener una referencia del sujeto (esto puede variar entre implementaciones del m\xe9todo observer pero la original la mantiene), esto con el fin de realizar acciones cuando se realiza el update como tomar los datos desde el mismo sujeto."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Se relaciona:")," Implementa la clase o interfaz observador para ser un observador concreto."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Responsabilidad:")," Realiza acciones de acuerdo a la notificaci\xf3n, normalmente con su referencia al sujeto, obtiene los datos nuevos del mismo."),(0,r.kt)("h2",{id:"relaci\xf3n-con-otros-patrones"},(0,r.kt)("strong",{parentName:"h2"},"Relaci\xf3n con otros patrones:")),(0,r.kt)("p",null,"Se relaciona con el ",(0,r.kt)("strong",{parentName:"p"},"patr\xf3n Mediator")," ya que este puede actuar como un intermediario centralizado que coordina las comunicaciones entre los objetos observables y los observadores. En lugar de que los observadores se suscriban directamente a los objetos observables, se suscriben al Mediator, y este \xfaltimo se encarga de distribuir las notificaciones a los observadores relevantes. "),(0,r.kt)("p",null,"Otro patr\xf3n con el que se puede relacionar es el ",(0,r.kt)("strong",{parentName:"p"},"Singleton")," ya que la cola que utilizamos en el ejemplo de mediaci\xf3n virtual puede ser singleton para trabajar con una sola instancia de esta."),(0,r.kt)("h2",{id:"consecuencias"},(0,r.kt)("strong",{parentName:"h2"},"Consecuencias:")),(0,r.kt)("p",null,"Si aplicamos este patr\xf3n hay que tener en cuenta los beneficios y desventajas que esto acarrea, en algunas ocasiones puede mejorar la eficiencia del producto pero vuelve m\xe1s complejo el c\xf3digo, a continuaci\xf3n se mencionan diferentes objetivos o ventajas que logramos obtener y los trade-off o desventajas que tenemos que \u201cpagar\u201d por hacer uso del patr\xf3n Observer:"),(0,r.kt)("h3",{id:"objetivos-o-ventajas"},(0,r.kt)("strong",{parentName:"h3"},"Objetivos o ventajas:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Desacoplamiento:")," Permite desacoplar el sujeto observable y los observadores, lo que significa que pueden interactuar sin estar estrechamente acoplados. Los observadores no necesitan conocer los detalles internos del sujeto observable y viceversa ","[1]",".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Fomenta el cumplimiento del principio SOLID:")," Permite extender el sistema con nuevos observadores sin modificar el sujeto observable. Esto facilita la adici\xf3n de nuevas funcionalidades sin afectar el c\xf3digo existente volvi\xe9ndo flexible y mantenible.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Fomenta el cumplimiento del principio KISS:")," Promueve la simplicidad y la claridad del dise\xf1o al separar las responsabilidades y evitar el acoplamiento directo entre el sujeto observable y los observadores. Cada componente tiene una \xfanica tarea y no hay dependencias complicadas entre ellos..")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Actualizaci\xf3n en tiempo real:")," El patr\xf3n Observer permite que los observadores reciban actualizaciones en tiempo real cuando se producen cambios en el sujeto observable. Esto es especialmente \xfatil en situaciones donde es necesario mantener los objetos sincronizados y reflejar los cambios de manera inmediata."))),(0,r.kt)("h3",{id:"trade-off"},(0,r.kt)("strong",{parentName:"h3"},"Trade-off:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Complejidad adicional"),": La implementaci\xf3n de este patr\xf3n puede a\xf1adir una complejidad adicional en el dise\xf1o y la estructura del sistema. Se requiere establecer y mantener la relaci\xf3n entre los sujetos observables y los observadores, lo que puede aumentar la complejidad y el esfuerzo de desarrollo.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Sobrecarga de rendimiento"),": Si hay muchos observadores registrados con el sujeto observable y se producen cambios frecuentes en el estado del sujeto, puede empeorar el rendimiento del programa debido a la notificaci\xf3n y actualizaci\xf3n de todos los observadores.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Posible falta de control de secuencia"),": Dependiendo de c\xf3mo se implemente el patr\xf3n Observer, puede haber una falta de control de secuencia en la notificaci\xf3n de los observadores, es decir, los observadores son notificados de forma aleatoria. Esto podr\xeda causar problemas si el orden de notificaci\xf3n es crucial para el sistema ","[3]","."))),(0,r.kt)("h2",{id:"implementaci\xf3n"},(0,r.kt)("strong",{parentName:"h2"},"Implementaci\xf3n:")),(0,r.kt)("h3",{id:"evitar-y-trampas"},(0,r.kt)("strong",{parentName:"h3"},"Evitar y trampas:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Eliminar las referencias de los sujetos en la lista antes de eliminarlo del todo, esto para evitar problemas de memoria y notificaciones a sujetos no existentes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Gestionar bien la lista de observadores para no tener m\xfaltiples referencias al mismo sujeto y notificar m\xfaltiples veces (indeseadas)."))),(0,r.kt)("h3",{id:"sugerencias-y-t\xe9cnicas"},(0,r.kt)("strong",{parentName:"h3"},"Sugerencias y t\xe9cnicas:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A\xf1ade que se pueda hacer \u201cAttach\u201d y \u201cDetach\u201d de manera din\xe1mica en tiempo de ejecuci\xf3n, esto permite flexibilidad y extensibilidad.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A\xf1adir mecanismos de notificaciones espec\xedficas, esto para que solo se suscriban a aquellos sujetos que les interesan.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Realizar agrupaci\xf3n de notificaciones en casos de m\xfaltiples cambios en cortos periodos de tiempo. Se puede usar con una cola o temporizador para agrupar las notificaciones y actualizaciones, puede mejorar el rendimiento en situaciones de m\xfaltiples cambios en cortos periodos de tiempo.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Gestionar bien las notificaciones para que solo sean notificaciones relevantes y evitar actualizaciones innecesarias."))),(0,r.kt)("h2",{id:"ejemplo-en-c\xf3digo"},(0,r.kt)("strong",{parentName:"h2"},"Ejemplo en c\xf3digo")),(0,r.kt)("p",null,"Recuerda el ejemplo sobre mediaci\xf3n virtual que se plante\xf3 anteriormente, pues se logr\xf3 implementar en python utilizando el patr\xf3n Observer. "),(0,r.kt)("p",null,"Si desea ver el c\xf3digo y probarlo tenga en cuenta las siguientes indicaciones:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Instalar dependencias de python")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Luego irse a la carpeta con el src (Ejemplo de path: ",(0,r.kt)("strong",{parentName:"p"},"C:\\Users\\fasav\\OneDrive\\Desktop\\UCR\\Primer semestre 2023\\Dise\xf1o\\ObserverPattern\\ObserverCode\\src>"),") ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Compilar con el bot\xf3n de ",(0,r.kt)("strong",{parentName:"p"},"play")," \u25b6\ufe0f de Visual Studio o utilizando el comando ",(0,r.kt)("strong",{parentName:"p"},"python observer.py")))),(0,r.kt)("p",null,"Para poder ver el c\xf3digo se debe de dirigir a la carpeta:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ObserverPattern/ObserverCode/src/observer.py")),(0,r.kt)("h2",{id:"presentaci\xf3n"},"Presentaci\xf3n"),(0,r.kt)("p",null,"Presentaci\xf3n utilizada en clase para exponer el patr\xf3n, tiene im\xe1genes del ejemplo en c\xf3digo y elementos m\xe1s detallados y visuales"),(0,r.kt)("p",null,"Se encuentra en la ruta:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ObserverPattern/Presentation/ObserverPresentation.pdf")),(0,r.kt)("h2",{id:"bibliograf\xeda"},(0,r.kt)("strong",{parentName:"h2"},"Bibliograf\xeda")),(0,r.kt)("p",null,"[1]"," Helm, R., Gamma, E., Vlissides, J., & Johnson, R. (2005). ",(0,r.kt)("em",{parentName:"p"},"Design Patterns"),". Addison Wesley"),(0,r.kt)("p",null,"[2]"," BettaTech. (2020, 26 de septiembre). ",(0,r.kt)("em",{parentName:"p"},"OBSERVER (El PATR\xd3N que lo ve TODO) | PATRONES de DISE\xd1O")," ","[Video]",". YouTube. ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=HFkZb1g8faA"},"https://www.youtube.com/watch?v=HFkZb1g8faA")),(0,r.kt)("p",null,"[3]",' Observer". ',(0,r.kt)("em",{parentName:"p"},"Refactoring and Design Patterns"),". ",(0,r.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/observer"},"https://refactoring.guru/design-patterns/observer"),"."),(0,r.kt)("p",null,"[4]"," Gaitonde, A. (2021). Observer Design Pattern \u2014 Explained In Five Minutes. ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/swlh/observer-design-pattern-explained-in-five-minutes-c01113666318"},"https://medium.com/swlh/observer-design-pattern-explained-in-five-minutes-c01113666318")))}u.isMDXComponent=!0},8837:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/DiagramaEjemplo-967003cd485aebd4221668acb8463511.png"},7791:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/DiagramaObserver-654b2dd63965cff370b67259704974e3.png"},7546:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/EjemplosObserver-4177eeced5c38834dd51387b929685eb.png"},118:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/Imagendemediacion-9efc92875edcdafc7d5db1f3a8ede1c7.png"}}]);