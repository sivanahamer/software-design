"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9356],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>g});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},p=function(e){var a=c(e.components);return n.createElement(s.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return t?n.createElement(g,r(r({ref:a},p),{},{components:t})):n.createElement(g,r({ref:a},p))}));function g(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var l=t.length,r=new Array(l);r[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var c=2;c<l;c++)r[c]=t[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8047:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=t(7462),o=(t(7294),t(3905));const l={},r="Strategy",i={unversionedId:"patterns/comportamiento/Strategy/ReadMe",id:"patterns/comportamiento/Strategy/ReadMe",title:"Strategy",description:"Carlos Antonio Sanchez Blanco - C17226",source:"@site/docs/5.patterns/comportamiento/Strategy/ReadMe.md",sourceDirName:"5.patterns/comportamiento/Strategy",slug:"/patterns/comportamiento/Strategy/",permalink:"/software-design/docs/patterns/comportamiento/Strategy/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5.patterns/comportamiento/Strategy/ReadMe.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"**Investigaci\xf3n del patr\xf3n de dise\xf1o Observer**",permalink:"/software-design/docs/patterns/comportamiento/ObserverPattern/"},next:{title:"Patr\xf3n Visitor",permalink:"/software-design/docs/patterns/comportamiento/Visitor/"}},s={},c=[{value:"Soluci\xf3n mediocre",id:"soluci\xf3n-mediocre",level:2},{value:"Soluci\xf3n mejor",id:"soluci\xf3n-mejor",level:2}],p={toc:c},u="wrapper";function d(e){let{components:a,...l}=e;return(0,o.kt)(u,(0,n.Z)({},p,l,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"strategy"},"Strategy"),(0,o.kt)("h1",{id:"integrantes"},"Integrantes"),(0,o.kt)("p",null,"Carlos Antonio Sanchez Blanco - C17226"),(0,o.kt)("p",null,"Juan Carlos Aguilar Torres - C10144"),(0,o.kt)("h1",{id:"descripci\xf3n-del-patr\xf3n"},"Descripci\xf3n del patr\xf3n"),(0,o.kt)("p",null,"El patr\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"Strategy")," es un patr\xf3n de comportamiento, el cual toma un ",(0,o.kt)("strong",{parentName:"p"},"problema")," con la peculiaridad de ",(0,o.kt)("strong",{parentName:"p"},"ser resuelto o ejecutado de distintas formas")),(0,o.kt)("p",null,"Y lo que hace es crear una clase que hace de ",(0,o.kt)("strong",{parentName:"p"},"puente")," entre el ",(0,o.kt)("strong",{parentName:"p"},"c\xf3digo cliente y las soluciones")," al problema, las cuales son las ",(0,o.kt)("inlineCode",{parentName:"p"},"estrategias")),(0,o.kt)("p",null,"Y la idea es que el c\xf3digo cliente se encargue de:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Proveer la estrategia que desea realizar"),(0,o.kt)("li",{parentName:"ol"},"Utilizar la clase que hace de ",(0,o.kt)("strong",{parentName:"li"},"puente")," para que se realice la estrategia escogida")),(0,o.kt)("p",null,"Y el resultado es hacer que el ",(0,o.kt)("strong",{parentName:"p"},"c\xf3digo cliente")," y las ",(0,o.kt)("strong",{parentName:"p"},"estrategias")," interact\xfaen por medio de una ",(0,o.kt)("strong",{parentName:"p"},"abstracci\xf3n"),", y no una implementaci\xf3n en c\xf3digo"),(0,o.kt)("p",null,"Lo que libera de cargas al c\xf3digo cliente y hace m\xe1s entendible el uso de las estrategias para el problema"),(0,o.kt)("h1",{id:"cu\xe1ndo-utilizar-el-patr\xf3n-strategy"},"Cu\xe1ndo utilizar el patr\xf3n ",(0,o.kt)("inlineCode",{parentName:"h1"},"Strategy"),"?"),(0,o.kt)("p",null,"Es buena pr\xe1ctica realizar un procedimiento el cual engloba:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Identificaci\xf3n del problema")),(0,o.kt)("p",{parentName:"blockquote"},"Los ",(0,o.kt)("strong",{parentName:"p"},"Requerimientos del c\xf3digo cliente"),", lo que necesita que sea hecho para poder realizar su objetivo final"),(0,o.kt)("p",{parentName:"blockquote"},"La ",(0,o.kt)("strong",{parentName:"p"},"Implementaci\xf3n a realizar")),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Beneficios y Perjuicios")," de la implementaci\xf3n")),(0,o.kt)("p",null,"Esto nos permite identificar en nuestro codigo el problema que resuelve el Strategy, el cual puede ser resuelto o ejecutado por distintas funciones dependiendo de los datos del contexto"),(0,o.kt)("p",null,"Es bastante f\xe1cil identificar un problema que se beneficie de usar el patr\xf3n strategy, los principales factores que el patr\xf3n strategy toma en cuenta de mayor a menor son:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Tipo de datos que ser\xe1n procesados, qu\xe9 atributos de estos datos hace que sea necesario tratarlos de una forma u otra"),(0,o.kt)("li",{parentName:"ol"},"Beneficios y Perjuicios de distintos procedimientos que sigue el programa para un mismo problema, no s\xf3lo dependiendo de los datos que ser\xe1n procesados, sino tambi\xe9n el estado en el que el programa se encuentra por ejemplo")),(0,o.kt)("p",null,"Habiendo definido los requerimientos del c\xf3digo cliente, ahora toca hacer la implementaci\xf3n, una soluci\xf3n poco eficiente, ser\xeda declarando s\xf3lo funciones las cuales ser\xedan las soluciones en el codigo cliente"),(0,o.kt)("p",null,"El problema con esta implementaci\xf3n es el ",(0,o.kt)("strong",{parentName:"p"},"alto acoplamiento")," con el c\xf3digo cliente y ",(0,o.kt)("strong",{parentName:"p"},"baja escalabilidad")),(0,o.kt)("p",null,"La soluci\xf3n ideal es el patr\xf3n strategy, el cual elimina exactamente esos problemas"),(0,o.kt)("p",null,"Ya que el acoplamiento se pasa a la clase que hace de puente, y la cantidad de soluciones no afecta negativamente el programa ya que el c\xf3digo cliente no llama expl\xedcitamente la funci\xf3n, s\xf3lo conoce la soluci\xf3n que necesita, lo que lo hace m\xe1s escalable"),(0,o.kt)("h1",{id:"problema"},"Problema"),(0,o.kt)("p",null,"Una buena forma de visualizar este patr\xf3n de forma m\xe1s pr\xe1ctica es con un problema, uno que est\xe1 relacionado con la UCR es el m\xe9todo de autenticaci\xf3n e ingreso"),(0,o.kt)("p",null,"Donde por ejemplo, digamos que se puede acceder a los recursos de un sitio de la UCR, pero dependiendo de qu\xe9 tipo de cuenta sea se necesita un m\xe9todo de autenticaci\xf3n diferente, como por ejemplo el ",(0,o.kt)("inlineCode",{parentName:"p"},"OAuth"),', el cual se usar\xeda para autenticar cuentas personales, como cuentas del tipo "gmail", mientras que otros tipos de correo, los del tipo "ucr.ac.cr" se necesitan tratar con otro m\xe9todo, como ',(0,o.kt)("inlineCode",{parentName:"p"},"SAMLLogin")),(0,o.kt)("p",null,"Adem\xe1s de cuentas, se puede llevar el mismo problema a m\xe9todos de evaluaci\xf3n en mediaci\xf3n virtual, los cuales pueden ser ",(0,o.kt)("inlineCode",{parentName:"p"},"ex\xe1menes")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"proyectos"),", este al igual que el problema anterior, ",(0,o.kt)("strong",{parentName:"p"},"tienen varias formas de hacer una misma cosa"),", "),(0,o.kt)("img",{src:"./img/StrategyImg1.png",alt:"Facade"}),(0,o.kt)("h1",{id:"soluci\xf3n"},"Soluci\xf3n"),(0,o.kt)("h2",{id:"soluci\xf3n-mediocre"},"Soluci\xf3n mediocre"),(0,o.kt)("p",null,"Una soluci\xf3n corriente ser\xeda que en el c\xf3digo que maneja el acceso y autenticaci\xf3n a la UCR sean manejados por puras funciones"),(0,o.kt)("p",null,"As\xed de f\xe1cil se soluciona el problema, pero ahora tenemos otro problema el cual es nuestro c\xf3digo, ahora nuestro c\xf3digo es:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Acoplado a cada funci\xf3n que procesa la informaci\xf3n")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Menos cohesivo, el c\xf3digo tiene m\xe1s responsabilidades adem\xe1s de las que ya ten\xeda")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Poco escalable por el acoplamiento")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Repetici\xf3n de c\xf3digo si cada funci\xf3n necesita alg\xfan preprocesado para prepararse y procesar la informaci\xf3n"))),(0,o.kt)("p",null,"Estos ser\xedan los problemas m\xe1s significativos que surgen, y podr\xedan ser m\xe1s dependiendo de qu\xe9 tan poco cuidado se tenga"),(0,o.kt)("h2",{id:"soluci\xf3n-mejor"},"Soluci\xf3n mejor"),(0,o.kt)("p",null,"El mayor problema es el ",(0,o.kt)("strong",{parentName:"p"},"acoplamiento de las funciones y el c\xf3digo cliente"),", por lo que arreglar esto se vuelve lo m\xe1s importante"),(0,o.kt)("p",null,"Una soluci\xf3n a este problema del acoplamiento es haciendo ",(0,o.kt)("strong",{parentName:"p"},"la clase puente")," entre las funciones y el c\xf3digo, donde establecemos ",(0,o.kt)("strong",{parentName:"p"},"una interfaz para ambos"),", "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Contexto",(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"La interfaz ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto")," va a servir al c\xf3digo cliente")))),(0,o.kt)("p",null,"El Contexto define c\xf3mo el c\xf3digo cliente puede acceder a las funciones para ejecutar algo, donde en vez de ser ejecutadas por el mismo c\xf3digo cliente, ahora se realizan por el Contexto, y se devuelven los resultados al c\xf3digo cliente"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Strategy",(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"La interfaz ",(0,o.kt)("inlineCode",{parentName:"p"},"Strategy")," va a servir a las funciones, que ser\xe1n las distintas soluciones al mismo problema")))),(0,o.kt)("p",null,"El Strategy define ",(0,o.kt)("strong",{parentName:"p"},"Qu\xe9 es una soluci\xf3n"),", o sea es una ",(0,o.kt)("strong",{parentName:"p"},"Abstracci\xf3n")," de las funciones"),(0,o.kt)("p",null,"Al convertir cada funci\xf3n en una abstracci\xf3n ahora podemos acceder a todas las funciones posibles bajo un mismo concepto, en vez de conocer cada funci\xf3n y qu\xe9 cosas tiene"),(0,o.kt)("p",null,"La necesidad de esta abstracci\xf3n, adem\xe1s de definir mejor ",(0,o.kt)("strong",{parentName:"p"},"Qu\xe9 es")," una soluci\xf3n, permite a la otra interfaz, el ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto")," referirse a las soluciones con esa abstracci\xf3n para cuando tenga que trabajar con ellas, \xe9l ",(0,o.kt)("strong",{parentName:"p"},"ya no necesita conocer a todas las soluciones, solo saber qu\xe9 es una soluci\xf3n para identificarla y trabajar con ella")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Concrete Strategy",(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"Cada una de las soluciones al problema")))),(0,o.kt)("p",null,"Estas son la implementaci\xf3n de una soluci\xf3n, las cuales cumplen con lo que dicta la interfaz ",(0,o.kt)("inlineCode",{parentName:"p"},"Strategy"),", haciendo tambi\xe9n mucho m\xe1s f\xe1cil de entender cuando algo es una soluci\xf3n para el humano y la m\xe1quina"),(0,o.kt)("p",null,"Con todas estas piezas definidas en el programa, ahora ser\xe1 mucho m\xe1s sencillo, f\xe1cil y escalable escribir m\xe1s c\xf3digo y m\xe1s soluciones que se benefician del bajo acoplamiento de todas estas funciones"),(0,o.kt)("p",null,"El c\xf3digo cliente s\xf3lo le basta tener una instancia del ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto")," y una de las soluciones, darle la soluci\xf3n al ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto")," para que la ejecute, y recibir el resultado de forma despreocupada a ejecutar la soluci\xf3n como tal"),(0,o.kt)("img",{src:"./img/StrategyImg2.png",alt:"Facade"}),(0,o.kt)("h1",{id:"implementaci\xf3n-del-patr\xf3n"},"Implementaci\xf3n del patr\xf3n"),(0,o.kt)("p",null,"Para implementar este patr\xf3n en el programa, lo m\xednimo necesario es hacer las clases:"),(0,o.kt)("img",{src:"./img/StrategyImg3.png",alt:"Facade"}),(0,o.kt)("p",null,"Fuente: ",(0,o.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/strategy"},"Refactoring Guru")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Contexto")),(0,o.kt)("p",null,"La clase que hace de ",(0,o.kt)("strong",{parentName:"p"},"puente")," entre el c\xf3digo cliente y las estrategias"),(0,o.kt)("p",null,"Se encarga de quitar las cargas del c\xf3digo cliente, acoplandose a las estrategias \xe9l mismo en vez del c\xf3digo cliente"),(0,o.kt)("p",null,"Tambi\xe9n es capaz de realizar alg\xfan proceso antes de ejecutar la estrategia"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"EstrategiaAbstracta")),(0,o.kt)("p",null,'Clase la cual s\xf3lo tiene la funci\xf3n de "ejecutar", la cual adem\xe1s toma como par\xe1metros la informaci\xf3n que necesita procesar, si lo necesita hacer'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"EstrategiasConcretas")),(0,o.kt)("p",null,"Clases que heredan de ",(0,o.kt)("inlineCode",{parentName:"p"},"EstrategiaAbstracta"),", las cuales son las distintas soluciones al problema, pueden existir muchas y no afectar negativamente ning\xfan aspecto del programa por esto"),(0,o.kt)("p",null,"Adem\xe1s de esas crear esas clases, el c\xf3digo cliente necesita ",(0,o.kt)("strong",{parentName:"p"},"conocer las estrategias para aplicarlas")," e ",(0,o.kt)("strong",{parentName:"p"},"interactuar con la clase ",(0,o.kt)("inlineCode",{parentName:"strong"},"Contexto")," para ejecutar las funciones")),(0,o.kt)("p",null,"As\xed se logra el patr\xf3n strategy en su forma m\xe1s pura, donde el c\xf3digo cliente con los datos que quiere procesar llama a la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto"),", configura la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Strategy")," en el ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto")," y llama a ejecutar en la misma clase"),(0,o.kt)("p",null,"Tambi\xe9n existe una abstracci\xf3n m\xe1s sobre ",(0,o.kt)("strong",{parentName:"p"},"La elecci\xf3n de la estrategia"),", el cual hace que la clase que hace de puente se encargue tambi\xe9n de tener una l\xf3gica especial encargada a, bas\xe1ndose con los datos proveidos del c\xf3digo cliente, usar por su propia cuenta las estrategia y quitarle una carga m\xe1s al c\xf3digo cliente de tener que conocer las estrategias para usar"),(0,o.kt)("h1",{id:"ejemplo-en-c\xf3digo"},"Ejemplo en c\xf3digo"),(0,o.kt)("p",null,"El ejemplo en c\xf3digo se encuentra ",(0,o.kt)("a",{target:"_blank",href:t(607).Z},"aqui")),(0,o.kt)("p",null,"Para compilar, basta con"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make\n")),(0,o.kt)("p",null,"Para ejecutar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bin/Strategy <tamanho> <rango>\n")),(0,o.kt)("p",null,"Este ejemplo en codigo se basa en saber que algoritmo se adapta mejor a un arreglo para ordenar una lista de numeros random con el algoritmo mas rapido para este tipo de arreglo"),(0,o.kt)("p",null,"Tomemos por ejemplo un arreglo de numeros de tama\xf1o 100"),(0,o.kt)("p",null,"El problema de ordenar los numeros de la forma mas rapida posible tiene distitnos factores, uno de ellos el cual es muy significante es el ",(0,o.kt)("strong",{parentName:"p"},"rango el cual un numero puede tomar"),"(si el rango es de 1-9 en el ejemplo, entonces habrian 100 numeros entre 1-9)"),(0,o.kt)("p",null,"Si el rango es peque\xf1o, o sea que hay mucha repeticion de numeros, entonces un algoritmo de ordenamiento como Radix Sort o Heap Sort lograrian ordenar rapidamente el arreglo, pero si fuera muy largo, entonces esos algoritmos mas bien serian lentos, a comparacion de otros como el MergeSort"),(0,o.kt)("p",null,"Los algoritmos que se van a probar son"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"MergeSort"),(0,o.kt)("li",{parentName:"ol"},"HeapSort"),(0,o.kt)("li",{parentName:"ol"},"RadixSort"),(0,o.kt)("li",{parentName:"ol"},"BinSort")),(0,o.kt)("p",null,"Con el problema definido, lo que pretende el programa es generar un arreglo aleatorio de numeros, dependiendo de los argumentos del programa que de el usuario, donde"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"El primer argumento")," es el tama\xf1o del arreglo"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"El segundo argumento")," es el rango maximo que pueden tomat los numeros, con el rango minimo empezando en 0")),(0,o.kt)("p",null,"Por ejemplo:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"bin/Strategy 100 9")),(0,o.kt)("p",null,"Generaria valores entre 0-9 100 veces y los guarda en un arreglo para ser ordenados"),(0,o.kt)("p",null,"Entonces se pasa ese arreglo por un analizador de arreglos, y devuelve el algoritmo, como una estrategia, que resuelve lo mas rapidamente ese arreglo"),(0,o.kt)("p",null,"Esto lo hace pasando ese arreglo por todos los algoritmos y toma el tiempo de cada uno de ellos, los compara y devuelve el que obtuvo el menor tiempo, los tiempos se imprimen en la terminal en segundos tambien"),(0,o.kt)("p",null,"Al ser devuelto, la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Sorter"),", que hace como la clase Contexto, obtiene esa estrategia y la ejecuta, y acaba el programa"),(0,o.kt)("h1",{id:"consecuencias"},"Consecuencias"),(0,o.kt)("p",null,"El patr\xf3n de dise\xf1o Strategy tiene varias consecuencias que es importante tener en cuenta al utilizarlo en el desarrollo de software."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ventajas:")),(0,o.kt)("p",null,"Flexibilidad y extensibilidad: Una de las principales ventajas del patr\xf3n Strategy es su capacidad para agregar, cambiar o eliminar estrategias en tiempo de ejecuci\xf3n sin afectar el c\xf3digo cliente. Esto brinda una gran flexibilidad al sistema, ya que se pueden incorporar nuevas estrategias o modificar las existentes sin tener que modificar el c\xf3digo que las utiliza."),(0,o.kt)("p",null,"Reutilizaci\xf3n de c\xf3digo: El patr\xf3n Strategy fomenta la reutilizaci\xf3n del c\xf3digo, ya que las estrategias pueden ser utilizadas en diferentes contextos y aplicaciones. Esto evita la duplicaci\xf3n de c\xf3digo y promueve la mantenibilidad del sistema, ya que las estrategias pueden ser compartidas y utilizadas en diferentes partes del c\xf3digo."),(0,o.kt)("p",null,"Separaci\xf3n de responsabilidades: El patr\xf3n Strategy permite separar la implementaci\xf3n de un algoritmo de su uso y aplicaci\xf3n en el c\xf3digo cliente. Esto ayuda a mantener un dise\xf1o modular y facilita la comprensi\xf3n y mantenimiento del c\xf3digo, ya que cada estrategia tiene una responsabilidad clara y est\xe1 encapsulada en una clase separada."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Desventajas:")),(0,o.kt)("p",null,"Complejidad adicional: Al utilizar el patr\xf3n Strategy, se introduce una capa adicional de abstracci\xf3n. Esto puede llevar a una mayor complejidad en el sistema si no se aplica de manera adecuada. Es importante dise\xf1ar las interfaces y las relaciones entre las clases de manera cuidadosa para evitar complicaciones innecesarias."),(0,o.kt)("p",null,"Aumento del n\xfamero de clases: Como cada estrategia se implementa en una clase separada, el uso del patr\xf3n Strategy puede resultar en un aumento en el n\xfamero de clases en el sistema. Si no se maneja correctamente, esto puede dificultar la comprensi\xf3n y el mantenimiento del c\xf3digo, especialmente en sistemas grandes y complejos."),(0,o.kt)("p",null,"Posible degradaci\xf3n del rendimiento: El patr\xf3n Strategy implica un mayor nivel de indirecci\xf3n, ya que el c\xf3digo cliente debe interactuar con una interfaz y delegar la ejecuci\xf3n a una estrategia concreta. En comparaci\xf3n con una implementaci\xf3n directa del algoritmo, esto puede resultar en una peque\xf1a degradaci\xf3n del rendimiento. Sin embargo, en la mayor\xeda de los casos, esta degradaci\xf3n es insignificante y los beneficios de flexibilidad y reutilizaci\xf3n superan cualquier impacto negativo."),(0,o.kt)("h1",{id:"relacion-con-otros-patrones"},"Relacion con otros patrones"),(0,o.kt)("p",null,"El patr\xf3n Strategy se puede contrastar con otros patrones de dise\xf1o, como Template Method, Composite, State y Command, en t\xe9rminos de su enfoque y uso."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Template Method:\nTanto el patr\xf3n Strategy como Template Method se basan en la encapsulaci\xf3n de algoritmos. Sin embargo, difieren en su enfoque. El patr\xf3n Strategy permite cambiar din\xe1micamente entre diferentes estrategias, mientras que Template Method utiliza la herencia para permitir la personalizaci\xf3n de partes espec\xedficas del algoritmo. Mientras que Strategy se centra en cambiar la estrategia completa, Template Method se enfoca en permitir cambios en etapas espec\xedficas del algoritmo.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Composite:\nEl patr\xf3n Composite se utiliza para construir estructuras jer\xe1rquicas de objetos y tratarlos de manera uniforme. A diferencia de Strategy, que se enfoca en encapsular algoritmos, Composite permite la composici\xf3n de m\xfaltiples objetos en una estructura compuesta. En el contexto de Strategy, esto significa que se pueden crear estrategias compuestas, donde una estrategia puede contener y combinar m\xfaltiples estrategias m\xe1s peque\xf1as para lograr un comportamiento complejo.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"State:\nTanto Strategy como State se centran en encapsular comportamientos en clases separadas y permitir cambios din\xe1micos entre ellos. Sin embargo, se diferencian en su enfoque principal. El patr\xf3n State se centra en el cambio de estado de un objeto, donde cada estado representa un comportamiento diferente. Por otro lado, Strategy se enfoca en encapsular una \xfanica acci\xf3n con m\xfaltiples implementaciones posibles. Mientras que en State el cambio de estado afecta el comportamiento general del objeto, en Strategy el cambio de estrategia afecta solo a la acci\xf3n espec\xedfica que se est\xe1 ejecutando.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Command:\nTanto el patr\xf3n Strategy como Command se centran en encapsular acciones en clases y tienen una abstracci\xf3n adicional entre el c\xf3digo cliente y la funci\xf3n a realizar. Sin embargo, difieren en su enfoque principal. El patr\xf3n Command se centra en definir diferentes tipos de acciones, cada una encapsulada en una clase separada, y permite al cliente ejecutar estas acciones de manera flexible. Por otro lado, Strategy se centra en encapsular una \xfanica acci\xf3n con m\xfaltiples implementaciones posibles. En Strategy, el \xe9nfasis est\xe1 en la variabilidad de las estrategias, mientras que en Command, el \xe9nfasis est\xe1 en proporcionar una abstracci\xf3n para diferentes comandos."))),(0,o.kt)("h1",{id:"principios-de-disenho"},"Principios de disenho"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Principio de resonsabilidad unica")),(0,o.kt)("p",null,"Este principio ciertamente se cumple gracias a la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto"),", la cual quita responsabilidades al codigo cliente y se encarga el mismo de manejar las estrategias, las cuales son las implementaciones de las soluciones"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Principio Open/Closed")),(0,o.kt)("p",null,"Este igual se cumple, gracias al hecho de que la estructura de comunicacion, o sea las interfaces ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"Estrategia Abstracta")," no necesitan cambios al anhadir funcionalidad, y si los necesitan seran pocos, y al anhadir nuevas funciones al programa lo que se hace es crear mas clases del tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"Estrategia Concreta")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Segregacion de interfaces")),(0,o.kt)("p",null,"Lo cumple tanto para el ",(0,o.kt)("inlineCode",{parentName:"p"},"codigo cliente")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"las soluciones"),", porque define una clase para cada uno, haciendo que ahora se dependan de abstracciones por interfaces antes que puras implementaciones"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Inversion de dependencias")),(0,o.kt)("p",null,"Lo cumple por medio de la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Estrategia Abstracta"),", ya que hace que el codigo cliente solo necesite conocerlas soluciones, y para ejecutarlas llama a alguien que las ejecuta por el, dando toda esa carga a esa otra clase, y esta clase, la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto")," igualmente se beneficiade la inversion de dependencias por solo tener que saber ",(0,o.kt)("strong",{parentName:"p"},"que es una solucion")," y no ",(0,o.kt)("strong",{parentName:"p"},"tener que saber todas las soluciones")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"DRY")),(0,o.kt)("p",null,"Este patron es bueno para cuando se ",(0,o.kt)("strong",{parentName:"p"},"necesita hacer un preprocesado antes de ejecutar cualquier solucion"),", porque ese codigo solo se encontraria en la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto"),", la cual ejecuta las soluciones, y sin este patron, el codigo cliente necesitaria manejar ese preprocesado, teniendolo como otra funcion junto a las soluciones, incrementando el acoplamiento, o metiendo ese codigo en cada solucion, lo que es una repeticion de codigo terrible"),(0,o.kt)("p",null,"Pero se soluciona muy facilmente con la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Contexto")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"KISS")),(0,o.kt)("p",null,"Es mas simple solo poner funciones extras en el codigo cliente, o incluso tenerlas en una clase mas que hacer 2 clases que funcionan como interfaz, y n cantidad de clases que serian las soluciones, por lo que no cumple este principio y puede llevar a algunas malas implementaciones, donde la cura termina siendo peor que la enfermedad"),(0,o.kt)("p",null,"Pero no llega a ningun extremo"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"OOP")),(0,o.kt)("p",null,"Cumple totalmente con el paradigma orientado a objetos, porque cada solucion es una clase, la cual hereda de otra clase, una abstraccion, y el Contexto igual es otra clase"),(0,o.kt)("h1",{id:"referencias"},"Referencias"),(0,o.kt)("p",null,"refactoring. (s. f.). Strategy - ",(0,o.kt)("a",{parentName:"p",href:"https://refactoring.guru/es/design-patterns/strategy"},"https://refactoring.guru/es/design-patterns/strategy")),(0,o.kt)("p",null,"Pankaj. (2022). Strategy Design Pattern in Java - Example Tutorial. DigitalOcean.\n",(0,o.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/community/tutorials/strategy-design-pattern-in-java-example-tutorial"},"https://www.digitalocean.com/community/tutorials/strategy-design-pattern-in-java-example-tutorial")),(0,o.kt)("p",null,"Mittal, N. (2021). Why we need Solid Principles and it\u2019s types. Knoldus Blogs.\n",(0,o.kt)("a",{parentName:"p",href:"https://blog.knoldus.com/why-we-need-solid-principles-and-its-types/"},"https://blog.knoldus.com/why-we-need-solid-principles-and-its-types/")),(0,o.kt)("p",null,"Flaticon. (2023, June 10). Cube 3d Icon - 4783227. ",(0,o.kt)("a",{parentName:"p",href:"https://www.flaticon.com/free-icons/solid"},"https://www.flaticon.com/free-icons/solid")))}d.isMDXComponent=!0},607:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/Strategy-360e5bf5c6927b1ba93fdcb741d1f388.cpp"}}]);