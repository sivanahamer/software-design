"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8569],{3905:(e,o,a)=>{a.d(o,{Zo:()=>p,kt:()=>b});var t=a(7294);function n(e,o,a){return o in e?Object.defineProperty(e,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[o]=a,e}function r(e,o){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?r(Object(a),!0).forEach((function(o){n(e,o,a[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(a,o))}))}return e}function i(e,o){if(null==e)return{};var a,t,n=function(e,o){if(null==e)return{};var a,t,n={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],o.indexOf(a)>=0||(n[a]=e[a]);return n}(e,o);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=t.createContext({}),l=function(e){var o=t.useContext(c),a=o;return e&&(a="function"==typeof e?e(o):s(s({},o),e)),a},p=function(e){var o=l(e.components);return t.createElement(c.Provider,{value:o},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},m=t.forwardRef((function(e,o){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(a),m=n,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return a?t.createElement(b,s(s({ref:o},p),{},{components:a})):t.createElement(b,s({ref:o},p))}));function b(e,o){var a=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=m;var i={};for(var c in o)hasOwnProperty.call(o,c)&&(i[c]=o[c]);i.originalType=e,i[d]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<r;l++)s[l]=a[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5893:(e,o,a)=>{a.r(o),a.d(o,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var t=a(7462),n=(a(7294),a(3905));const r={},s="PROTOTYPE",i={unversionedId:"patterns/creacionales/prototype/Readme",id:"patterns/creacionales/prototype/Readme",title:"PROTOTYPE",description:"Introducci\xf3n:",source:"@site/docs/5.patterns/creacionales/prototype/Readme.md",sourceDirName:"5.patterns/creacionales/prototype",slug:"/patterns/creacionales/prototype/",permalink:"/software-design/docs/patterns/creacionales/prototype/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5.patterns/creacionales/prototype/Readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Factory Pattern",permalink:"/software-design/docs/patterns/creacionales/factory-method/"},next:{title:"Estructurales",permalink:"/software-design/docs/category/estructurales"}},c={},l=[{value:"Introducci\xf3n:",id:"introducci\xf3n",level:2},{value:"Problema:",id:"problema",level:2},{value:"Soluci\xf3n:",id:"soluci\xf3n",level:2},{value:"Ejemplo de c\xf3digo:",id:"ejemplo-de-c\xf3digo",level:2},{value:"Consecuencias:",id:"consecuencias",level:2},{value:"Pros",id:"pros",level:3},{value:"Contras",id:"contras",level:3},{value:"Implementaci\xf3n:",id:"implementaci\xf3n",level:2},{value:"Relaci\xf3n con otros patrones:",id:"relaci\xf3n-con-otros-patrones",level:2},{value:"Conclusi\xf3n:",id:"conclusi\xf3n",level:2},{value:"Referencias:",id:"referencias",level:2}],p={toc:l},d="wrapper";function u(e){let{components:o,...r}=e;return(0,n.kt)(d,(0,t.Z)({},p,r,{components:o,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"prototype"},"PROTOTYPE"),(0,n.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n:"),(0,n.kt)("p",null,"El patr\xf3n Prototype pertenece a los patrones creacionales.\nUno de los mejores analog\xedas que explican el patr\xf3n creacional de prototype es el de la mitosis celular. La mitosis es un proceso fundamental para la vida. Durante la mitosis, una c\xe9lula duplica todo su contenido, incluyendo sus cromosomas, y se divide para formar dos c\xe9lulas hijas id\xe9nticas."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Proceso de mitosis",src:a(1280).Z,width:"629",height:"311"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://refactoring.guru/design-patterns/prototype"},"Ref refactoring.guru"))),(0,n.kt)("h2",{id:"problema"},"Problema:"),(0,n.kt)("p",null,"Describir en qu\xe9 escenario o contexto en espec\xedfico en donde tiene sentido utilizar este patr\xf3n, con ejemplo\nDada la complejidad de ciertos objetos, se vuelve necesario agregar un m\xe9todo de clonado. De esta manera, podemos obtener una copia del objeto, sin tener que crearlo nuevamente desde cero. Por ejemplo, para obtener el promedio ponderado en ematricula, un objeto de la super-clase Promedio, puede contener la lista de cursos con su respectiva nota, cuando se crea una instancia del mismo, se calcula el promedio iterando por todos los cursos y sus notas. Adem\xe1s, hay diferentes promedios (PromedioPonderadoAnual, PromedioPonderadoTotal, PromedioPonderadoParaMatr\xedcula). Dado que esta operaci\xf3n resulta costosa, pues debe obtener todos los cursos de un estudiante y recorrerlos para hacer la operaci\xf3n matem\xe1tica relacionada al promedio. Este escenario para un solo estudiante, una sola vez, no representa mayor problema. Sin embargo, en per\xedodo de matr\xedcula la cantidad de estudiantes accediendo a e-matr\xedcula y consultando sus promedios e historial de los mismos se incrementa considerablemente. Las peticiones al servidor para obtener esta informaci\xf3n incrementan considerablemente. De esta forma, la instanciaci\xf3n del objeto Promedio, sobrecarga al sistema debido a su alto costo. "),(0,n.kt)("h2",{id:"soluci\xf3n"},"Soluci\xf3n:"),(0,n.kt)("p",null,"Estructura de la soluci\xf3n incluyendo los elementos, sus relaciones, responsabilidad y colaboraciones. Adem\xe1s, vienen en formato de plantilla dado que no describen un dise\xf1o o implementaci\xf3n en particular.\nPara evitar tener que invertir tanto tiempo para acceder a esta informaci\xf3n, hacemos que las clases implementen una interfaz llamada Clonable, y cada vez que un estudiante solicite cualquier promedio, la primera vez que lo solicite se crea una instancia y se guarda en una estructura de datos que relacione la instancia del Promedio con un id (aka carne estudiantil y el nombre del promedio unidos). Con esto, la pr\xf3xima vez que el usuario requiera de esta informaci\xf3n el sistema de e-matr\xedcula acceder\xe1 un object Store (aka cache) que mantiene una instancia del promedio y que devuelve una copia del mismo al estudiante."),(0,n.kt)("h2",{id:"ejemplo-de-c\xf3digo"},"Ejemplo de c\xf3digo:"),(0,n.kt)("p",null,"El patr\xf3n de dise\xf1o de prototipos es uno de los patrones de dise\xf1o de creaci\xf3n, por lo que proporciona un mecanismo de creaci\xf3n de objetos.\nEl concepto es copiar un objeto existente en lugar de crear una nueva instancia desde cero, algo que puede incluir operaciones costosas. El objeto existente act\xfaa como prototipo y contiene el estado del objeto (los detalles del objeto). El nuevo objeto copiado puede cambiar las mismas propiedades s\xf3lo si es necesario. Este enfoque ahorra costosos recursos y tiempo, especialmente cuando la creaci\xf3n de objetos es un proceso pesado."),(0,n.kt)("p",null,"El patr\xf3n Prototipo delega el proceso de clonaci\xf3n a los objetos que se est\xe1n clonando. El patr\xf3n declara una interfaz com\xfan para todos los objetos que admiten la clonaci\xf3n. Esta interfaz le permite clonar un objeto sin acoplar su c\xf3digo a la clase de ese objeto. Normalmente, esta interfaz contiene un \xfanico m\xe9todo de clonaci\xf3n."),(0,n.kt)("p",null,"Un objeto que permite la clonaci\xf3n se denomina prototipo. Cuando tus objetos tienen docenas de campos y cientos de configuraciones posibles, clonarlos puede servir como alternativa a la subclase.\nUna de las mejores formas disponibles para crear un objeto a partir de objetos existentes es el m\xe9todo clone(). Clonar es el enfoque m\xe1s simple para implementar un patr\xf3n prototipo. Sin embargo, es usted quien debe decidir c\xf3mo copiar un objeto existente en funci\xf3n de su modelo de negocio."),(0,n.kt)("p",null,"As\xed es como funciona: se crea un conjunto de objetos, configurados de varias maneras. Cuando necesite un objeto como el que ha configurado, s\xf3lo tiene que clonar un prototipo en lugar de construir un nuevo objeto desde cero."),(0,n.kt)("p",null,"Participantes en el dise\xf1o de prototipos"),(0,n.kt)("p",null,"1) Prototipo : Es el prototipo de un objeto real.\n2) Registro de prototipos : Se utiliza como un servicio de registro para tener todos los prototipos accesibles utilizando simples par\xe1metros de cadena.\n3) Cliente : El cliente ser\xe1 responsable de utilizar el servicio de registro para acceder a las instancias del prototipo."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Participantes",src:a(2659).Z,width:"623",height:"262"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Ref: ",(0,n.kt)("a",{parentName:"em",href:"https://www.geeksforgeeks.org/prototype-design-pattern/"},"https://www.geeksforgeeks.org/prototype-design-pattern/"))),(0,n.kt)("p",null,"Supongamos que tenemos un objeto que carga datos de la base de datos. Ahora tenemos que modificar estos datos en nuestro programa varias veces, por lo que no es una buena idea crear el objeto utilizando la palabra clave new y cargar todos los datos de nuevo desde la base de datos. El mejor enfoque ser\xeda clonar el objeto existente en un nuevo objeto y luego hacer la manipulaci\xf3n de los datos. El patr\xf3n de dise\xf1o de prototipos exige que el objeto que se est\xe1 copiando proporcione la funci\xf3n de copia. No debe ser realizada por ninguna otra clase. Sin embargo, el uso de la copia superficial o profunda de las propiedades del objeto depende de los requisitos y es una decisi\xf3n de dise\xf1o.\nUna copia superficial crea un nuevo objeto que comparte algunos o todos los datos con el objeto original, mientras que una copia profunda crea un nuevo objeto con datos completamente nuevos que no se comparten con el objeto original. Esto significa que el nuevo objeto y el objeto original tienen referencias separadas a los objetos referenciados, de modo que si uno modifica el objeto, el otro no se ver\xe1 afectado.\nLa elecci\xf3n entre una copia superficial o profunda depende de las necesidades espec\xedficas de su aplicaci\xf3n."),(0,n.kt)("p",null,(0,n.kt)("a",{target:"_blank",href:a(8788).Z},"C\xf3digo final")),(0,n.kt)("h2",{id:"consecuencias"},"Consecuencias:"),(0,n.kt)("h3",{id:"pros"},"Pros"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Puede clonar objetos sin acoplarlos a sus clases concretas."),(0,n.kt)("li",{parentName:"ul"},"Puede deshacerse del c\xf3digo de inicializaci\xf3n repetido en favor de la clonaci\xf3n de prototipos prefabricados."),(0,n.kt)("li",{parentName:"ul"},"Puede producir objetos complejos de manera m\xe1s conveniente."),(0,n.kt)("li",{parentName:"ul"},"Agregar y eliminar productos en tiempo de ejecuci\xf3n: los prototipos le permiten incorporar una nueva clase de producto concreto en un sistema simplemente registrando una instancia protot\xedpica con el cliente. Eso es un poco m\xe1s flexible que otros patrones de creaci\xf3n, porque un cliente puede instalar y eliminar prototipos en tiempo de ejecuci\xf3n. "),(0,n.kt)("li",{parentName:"ul"},"Especificaci\xf3n de nuevos objetos mediante la variaci\xf3n de valores: los sistemas altamente din\xe1micos le permiten definir un nuevo comportamiento a trav\xe9s de la composici\xf3n de objetos especificando valores para las variables de un objeto y no definiendo nuevas clases."),(0,n.kt)("li",{parentName:"ul"},"Especificaci\xf3n de nuevos objetos por estructura variable: muchas aplicaciones crean objetos a partir de partes y subpartes. Por conveniencia, tales aplicaciones a menudo le permiten instanciar estructuras complejas definidas por el usuario para usar un subcircuito espec\xedfico una y otra vez.")),(0,n.kt)("h3",{id:"contras"},"Contras"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"La clonaci\xf3n de objetos complejos que tienen referencias circulares puede ser muy complicada."),(0,n.kt)("li",{parentName:"ul"},"Exagerado para un proyecto que usa muy pocos objetos y/o no tiene un \xe9nfasis subyacente en la extensi\xf3n de cadenas de prototipos."),(0,n.kt)("li",{parentName:"ul"},"Cada subclase de Prototype debe implementar la operaci\xf3n clone() que puede ser dif\xedcil. Adem\xe1s, implementar clone() puede ser dif\xedcil c cuando sus partes internas incluyen objetos que no admiten la copia o tienen referencias circulares.")),(0,n.kt)("h2",{id:"implementaci\xf3n"},"Implementaci\xf3n:"),(0,n.kt)("p",null,"Use el patr\xf3n Prototype cuando su c\xf3digo no deba depender de las clases concretas de objetos que necesita copiar.\nEsto sucede mucho cuando su c\xf3digo funciona con objetos que le pasan desde un c\xf3digo de terceros a trav\xe9s de alguna interfaz. Las clases concretas de estos objetos son desconocidas y no podr\xedas depender de ellos aunque quisieras."),(0,n.kt)("p",null,"El patr\xf3n Prototype proporciona al c\xf3digo del cliente una interfaz general para trabajar con todos los objetos que admiten la clonaci\xf3n. "),(0,n.kt)("p",null,"Esta interfaz hace que el c\xf3digo del cliente sea independiente de las clases concretas de objetos que clona.\nUtilice el patr\xf3n cuando desee reducir el n\xfamero de subclases que solo difieren en la forma en que inicializan sus respectivos objetos.\nSuponga que tiene una clase compleja que requiere una configuraci\xf3n laboriosa antes de que pueda usarse. Hay varias formas comunes de configurar esta clase y este c\xf3digo se encuentra disperso en su aplicaci\xf3n. Para reducir la duplicaci\xf3n, crea varias subclases y coloca cada c\xf3digo de configuraci\xf3n com\xfan en sus constructores. Resolvi\xf3 el problema de la duplicaci\xf3n, pero ahora tiene muchas subclases ficticias."),(0,n.kt)("p",null,"El patr\xf3n de prototipo permite usar un conjunto de objetos preconstruidos configurados de varias maneras como prototipos. En lugar de instanciar una subclase que coincida con alguna configuraci\xf3n, el cliente puede simplemente buscar un prototipo apropiado y clonarlo.\nUso del patr\xf3n de prototipo:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Cuando las clases se instancian en tiempo de ejecuci\xf3n."),(0,n.kt)("li",{parentName:"ul"},"Cuando el costo de crear un objeto es caro o complicado."),(0,n.kt)("li",{parentName:"ul"},"Cuando desee mantener el n\xfamero de clases en un m\xednimo de aplicaci\xf3n."),(0,n.kt)("li",{parentName:"ul"},"Cuando la aplicaci\xf3n cliente necesita ignorar la creaci\xf3n y representaci\xf3n de objetos.")),(0,n.kt)("h2",{id:"relaci\xf3n-con-otros-patrones"},"Relaci\xf3n con otros patrones:"),(0,n.kt)("p",null,"Muchos dise\xf1os comienzan usando Factory Method (menos complicado y m\xe1s personalizable) y evolucionan hacia Abstract Factory, Prototype o Builder (m\xe1s flexible, pero m\xe1s complicado)."),(0,n.kt)("p",null,"Las clases de Abstract Factory a menudo se basan en un conjunto de Factory Methods, pero tambi\xe9n se puede usar Prototype para componer los m\xe9todos en estas clases."),(0,n.kt)("p",null,"Los dise\xf1os que hacen un uso intensivo de Composite y Decorator a menudo pueden beneficiarse del uso de Prototype. La aplicaci\xf3n del patr\xf3n le permite clonar estructuras complejas en lugar de reconstruirlas desde cero.\nPrototype pueden implementarse como Singletons."),(0,n.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n:"),(0,n.kt)("p",null,"Las principales ventajas del patr\xf3n prototipo son las siguientes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Reduce la necesidad de subclasificaci\xf3n."),(0,n.kt)("li",{parentName:"ul"},"Oculta las complejidades de la creaci\xf3n de objetos."),(0,n.kt)("li",{parentName:"ul"},"Los clientes pueden obtener nuevos objetos sin saber qu\xe9 tipo de objeto ser\xe1."),(0,n.kt)("li",{parentName:"ul"},"Le permite agregar o eliminar objetos en tiempo de ejecuci\xf3n.")),(0,n.kt)("h2",{id:"referencias"},"Referencias:"),(0,n.kt)("p",null,"Design Patterns - Prototype Pattern. (n.d.). ",(0,n.kt)("a",{parentName:"p",href:"https://www.tutorialspoint.com/design_pattern/prototype_pattern.htm"},"https://www.tutorialspoint.com/design_pattern/prototype_pattern.htm")),(0,n.kt)("p",null,"GeeksforGeeks. (2022). Prototype Design Pattern. GeeksforGeeks. ",(0,n.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/prototype-design-pattern/"},"https://www.geeksforgeeks.org/prototype-design-pattern/")),(0,n.kt)("p",null,"Pankaj. (2022). Prototype Design Pattern in Java. DigitalOcean. ",(0,n.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/community/tutorials/prototype-design-pattern-in-java"},"https://www.digitalocean.com/community/tutorials/prototype-design-pattern-in-java")),(0,n.kt)("p",null,"Prototype Design Pattern - Javatpoint. (n.d.). ",(0,n.kt)("a",{parentName:"p",href:"http://www.javatpoint.com."},"www.javatpoint.com.")," ",(0,n.kt)("a",{parentName:"p",href:"https://www.javatpoint.com/prototype-design-pattern"},"https://www.javatpoint.com/prototype-design-pattern")),(0,n.kt)("p",null,"Prototype Pattern. (n.d.-a). ",(0,n.kt)("a",{parentName:"p",href:"https://www.patterns.dev/posts/prototype-pattern"},"https://www.patterns.dev/posts/prototype-pattern")),(0,n.kt)("p",null,"Refactoring.Guru. (2023). Prototype. Refactoring.Guru. ",(0,n.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/prototype"},"https://refactoring.guru/design-patterns/prototype")),(0,n.kt)("p",null,"The GoF Design Patterns Memory - Learning Object-Oriented Design & Programming. (2017). w3sDesign. ",(0,n.kt)("a",{parentName:"p",href:"http://w3sdesign.com/?gr=c04&ugr=proble"},"http://w3sdesign.com/?gr=c04&ugr=proble")))}u.isMDXComponent=!0},8788:(e,o,a)=>{a.d(o,{Z:()=>t});const t=a.p+"assets/files/Prototype-15dbf3a4c8bc0dfd8284c2b55511dd9a.java"},1280:(e,o,a)=>{a.d(o,{Z:()=>t});const t=a.p+"assets/images/celulas-03081ee89a4808670a78085ff345dd69.png"},2659:(e,o,a)=>{a.d(o,{Z:()=>t});const t=a.p+"assets/images/participantes-f15f51ad469476aacf6250f10e451967.png"}}]);